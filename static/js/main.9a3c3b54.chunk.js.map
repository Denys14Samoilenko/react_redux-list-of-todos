{"version":3,"sources":["features/queryReducer.ts","features/todos.ts","features/filterReducer.ts","features/currentTodo.ts","types/SortType.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","helpers/variables.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["ActionsType","Actions","initialState","query","actions","type","SET_QUERY","CLEAR_QUERY","todos","SET_TODOS","status","SET_STATUS","SortType","selectedTodo","todo","SELECT_TODO","rootReducer","combineReducers","state","action","RESET_TODO","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","TodoId","id","title","completed","dispatchTodo","isSelected","className","cn","onClick","actionsCurrTodo","TodoList","map","TodoFilter","dispatchQuery","dispatchStatus","value","onChange","event","actionsFilter","target","Object","values","selectedType","charAt","toUpperCase","slice","placeholder","actionsQuery","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","ERROR_MESSAGE","TodoModal","useState","selectedUser","setSelectedUser","isLoading","setIsLoading","userId","useEffect","getUser","user","catch","console","error","finally","href","email","name","App","dispatchTodos","visibleTodos","optionChange","getNewTodos","filter","Active","Complited","All","preparedTitle","trim","toLowerCase","preparedQuery","includes","getPreparedTodos","actionsTodos","isfilterError","length","Root","ReactDOM","render","document","getElementById"],"mappings":"kMAAYA,E,uEAAAA,K,sBAAAA,E,2BAAAA,M,KAKZ,ICHYC,EDGNC,EAAe,CACnBC,MAAO,IAGIC,EACD,SAACD,GAAD,MAAmB,CAC3BE,KAAML,EAAYM,UAClBH,UAHSC,EAKC,iBAAO,CACjBC,KAAML,EAAYO,e,SCbVN,K,uBAAAA,M,KAIZ,ICNYD,EDMNE,EAAe,CACnBM,MAAO,IAGIJ,EACD,SAACI,GAAD,MAAmB,CAC3BH,KAAMJ,EAAQQ,UACdD,W,SCbQR,K,yBAAAA,M,KAGZ,ICDYA,EDCNE,EAAe,CACnBQ,OAAQ,OAGGN,EACA,SAACM,GAAD,MAAoB,CAC7BL,KAAML,EAAYW,WAClBD,Y,SCRQV,K,0BAAAA,E,yBAAAA,M,KAKZ,ICPYY,EDONV,EAAe,CACnBW,aAAc,MAGHT,EACC,SAACU,GAAD,MACV,CAAET,KAAML,EAAYe,YAAaD,SAFxBV,EAIA,iBACT,CAAEC,KAAML,EAAYe,YAAaD,KAAM,OERrCE,EAAcC,0BAAgB,CAClCH,KFWgC,WAG5B,IAFJI,EAEG,uDAFKhB,EACRiB,EACG,uCACH,OAAQA,EAAOd,MACb,KAAKL,EAAYe,YACf,OAAO,2BACFG,GADL,IAEEL,aAAcM,EAAOL,OAGzB,KAAKd,EAAYoB,WACf,OAAO,2BACFF,GADL,IAEEL,aAAc,OAGlB,QACE,OAAOK,IE5BXR,OHI2B,WAGvB,IAFJQ,EAEG,uDAFKhB,EACRiB,EACG,uCACH,OAAQA,EAAOd,OACRL,EAAYW,WACR,2BAAKO,GAAZ,IAAmBR,OAAQS,EAAOT,SAEpBQ,GGXlBf,MLQ0B,WAGtB,IAFJe,EAEG,uDAFKhB,EACRiB,EACG,uCACH,OAAQA,EAAOd,MACb,KAAKL,EAAYM,UACf,OAAO,2BAAKY,GAAZ,IAAmBf,MAAOgB,EAAOhB,QAEnC,KAAKH,EAAYO,YACf,OAAO,2BAAKW,GAAZ,IAAmBf,MAAO,KAE5B,QAAS,OAAOe,IKlBlBV,MJK0B,WAGtB,IAFJU,EAEG,uDAFKhB,EACRiB,EACG,uCACH,OAAQA,EAAOd,OACRJ,EAAQQ,UACJ,2BAAKS,GAAZ,IAAmBV,MAAOW,EAAOX,QAEnBU,KIVPG,EAAQC,sBACnBN,EACAO,8BACEC,0BAAgBC,O,2DCfPC,EAAoCC,IACpCC,EAAkDC,I,OCKlDC,EAA4B,SAAC,GAAc,IAAZhB,EAAW,EAAXA,KAEpCiB,EAGFjB,EAHFkB,GACAC,EAEEnB,EAFFmB,MACAC,EACEpB,EADFoB,UAGMrB,EAAiBe,GAAe,SAACV,GAAD,OAAWA,EAAMJ,QAAjDD,aACFsB,EAAeT,IAQfU,EAAaL,KAFJlB,GAAgB,IAAvBmB,GAIR,OACE,qBACE,UAAQ,OACRK,UAAWC,IAAG,CACZ,4BAA6BF,IAHjC,UAME,oBAAIC,UAAU,eAAd,SAA8BN,IAC9B,oBAAIM,UAAU,eAAd,SACGH,GACC,sBAAMG,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAInB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWC,IAAG,CACf,mBAAoBJ,EACpB,mBAAoBA,IAFtB,SAKGD,MAGL,oBAAII,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVhC,KAAK,SACLkC,QArCiB,kBACvBJ,EAAaK,EAA2B1B,KAgCpC,SAME,sBAAMuB,UAAU,OAAhB,SACE,mBAAGA,UAAWC,IAAG,MAAO,CACtB,UAAWF,EACX,eAAgBA,gBCtDjBK,EAA4B,SAAC,GAEnC,IADLjC,EACI,EADJA,MAEA,OACE,wBAAO6B,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCAEG7B,EAAMkC,KAAI,SAAA5B,GAAI,OACb,cAAC,EAAD,CAEEA,KAAMA,GADDA,EAAKkB,c,SJ7BVpB,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KKKL,IAAM+B,EAAuB,WAClC,IAAQxC,EAAUyB,GAAe,SAACV,GAAD,OAAWA,EAAMf,SAA1CA,MACAO,EAAWkB,GAAe,SAACV,GAAD,OAAWA,EAAMR,UAA3CA,OAEFkC,EAAgBlB,IAChBmB,EAAiBnB,IAcvB,OACE,uBAAMW,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,wBACE,UAAQ,eACRS,MAAOpC,EACPqC,SAnBiB,SAACC,GAAD,OACzBH,EAAeI,EAAwBD,EAAME,OAAOJ,SAe9C,SAKGK,OAAOC,OAAOxC,GAAU8B,KAAI,SAACW,GAAD,OAC3B,wBAA2BP,MAAOO,EAAlC,SACGA,EAAaC,OAAO,GAAGC,cAAgBF,EAAaG,MAAM,IADhDH,YAQrB,oBAAGhB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRhC,KAAK,OACLgC,UAAU,QACVoB,YAAY,YACZX,MAAO3C,EACP4C,SAjCY,SAACC,GAAD,OAClBJ,EAAcc,EAAsBV,EAAME,OAAOJ,WAkC7C,sBAAMT,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdlC,GACC,sBAAMkC,UAAU,gBAAgBsB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRvD,KAAK,SACLgC,UAAU,SACVE,QA1Ca,kBACvBK,EAAcc,iBClBLG,G,MAAmB,kBAC9B,qBAAKxB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCOnB,SAASyB,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,ICrBMC,EAAgB,eCQhBC,EAAsB,WACjC,MAAwCC,mBAAsB,MAA9D,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACQlE,EAAiBe,GAAe,SAACV,GAAD,OAAWA,EAAMJ,QAAjDD,aACFsB,EAAeT,IAGnBsD,EAIEnE,EAJFmE,OACAhD,EAGEnB,EAHFmB,GACAC,EAEEpB,EAFFoB,MACAC,EACErB,EADFqB,UAaF,OAVA+C,qBAAU,WACRF,GAAa,GFCM,SAACC,GAAD,OAAoBlB,EAAG,iBAAiBkB,IEC3DE,CAAQF,GACLX,MAAK,SAACc,GAAD,OAAUN,EAAgBM,MAE/BC,OAAM,kBAAMC,QAAQC,MAAMb,MAC1Bc,SAAQ,kBAAMR,GAAa,QAC7B,CAAClE,IAGF,sBAAKwB,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEdyC,EACC,cAAC,EAAD,IAEA,sBAAKzC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYL,KAIZ,wBACE3B,KAAK,SACLgC,UAAU,SACV,UAAQ,cACRE,QAAS,kBAAMJ,EAAaK,WAIhC,sBAAKH,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGJ,IAGH,oBAAGI,UAAU,QAAQ,UAAQ,aAA7B,UACGH,EACG,wBAAQG,UAAU,mBAAlB,kBACA,wBAAQA,UAAU,kBAAlB,qBAEH,OAED,mBAAGmD,KAAI,wBAAYZ,QAAZ,IAAYA,OAAZ,EAAYA,EAAca,OAAjC,gBACGb,QADH,IACGA,OADH,EACGA,EAAcc,oBCrBxB,IAAMC,EAAgB,WAC3B,IAAQxF,EAAUyB,GAAe,SAACV,GAAD,OAAWA,EAAMf,SAA1CA,MACAK,EAAUoB,GAAe,SAACV,GAAD,OAAWA,EAAMV,SAA1CA,MACAE,EAAWkB,GAAe,SAACV,GAAD,OAAWA,EAAMR,UAA3CA,OAEFkF,EAAgBlE,IACtB,EAAkCiD,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACQlE,EAAiBe,GAAe,SAACV,GAAD,OAAWA,EAAMJ,QAAjDD,aAEFgF,EAxCR,SACErF,EACAL,EACA2F,GAEA,IAAIC,EAAW,YAAOvF,GAuBtB,OArBAuF,EAAcA,EAAYC,QAAO,SAAAlF,GAC/B,OAAQgF,GACN,KAAKlF,EAASqF,OACZ,OAAQnF,EAAKoB,UACf,KAAKtB,EAASsF,UACZ,OAAOpF,EAAKoB,UACd,KAAKtB,EAASuF,IACd,QACE,OAAOrF,MAITX,IACF4F,EAAcA,EAAYC,QAAO,YAAgB,IACzCI,EADwC,EAAZnE,MACNoE,OAAOC,cAC7BC,EAAgBpG,EAAMkG,OAAOC,cAEnC,OAAOF,EAAcI,SAASD,OAI3BR,EAYcU,CAAiBjG,EAAOL,EAAOO,GAEpDuE,qBAAU,WACRF,GAAa,GHvCajB,EAAY,UG0CnCO,MAAK,SAACE,GAAD,OAASqB,EAAcc,EAAsBnC,OAElDa,OAAM,kBAAMC,QAAQC,MAAMb,MAC1Bc,SAAQ,kBAAMR,GAAa,QAC7B,IAEH,IAAM4B,GAAiB7B,IAAce,EAAae,OAElD,OACE,qCACE,qBAAKvE,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAEDsE,EAEG,oBAAItE,UAAU,eAAd,iEAGA,qBAAKA,UAAU,QAAf,SACGyC,EACG,cAAC,EAAD,IAEA,cAAC,EAAD,CACEtE,MAAOqF,eAStBhF,GACD,cAAC,EAAD,QC5FFgG,EAAO,kBACX,cAAC,IAAD,CAAUxF,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNyF,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.9a3c3b54.chunk.js","sourcesContent":["export enum ActionsType {\n  SET_QUERY = 'SET_QUERY',\n  CLEAR_QUERY = 'CLEAR_QUERY',\n}\n\nconst initialState = {\n  query: '',\n};\n\nexport const actions = {\n  setQuery: (query:string) => ({\n    type: ActionsType.SET_QUERY,\n    query,\n  }),\n  clearQuery: () => ({\n    type: ActionsType.CLEAR_QUERY,\n  }),\n};\n\nexport const queryReducer = (\n  state = initialState,\n  action:{ type:ActionsType, query?:string },\n) => {\n  switch (action.type) {\n    case ActionsType.SET_QUERY:\n      return { ...state, query: action.query };\n\n    case ActionsType.CLEAR_QUERY:\n      return { ...state, query: '' };\n\n    default: return state;\n  }\n};\n","import { Todo } from '../types/Todo';\n\nexport enum Actions {\n  SET_TODOS = 'SET_TODOS',\n}\n\nconst initialState = {\n  todos: [],\n};\n\nexport const actions = {\n  setTodos: (todos:Todo[]) => ({\n    type: Actions.SET_TODOS,\n    todos,\n  }),\n};\n\nexport const todosReducer = (\n  state = initialState,\n  action:{ type:Actions, todos:Todo[] },\n) => {\n  switch (action.type) {\n    case Actions.SET_TODOS:\n      return { ...state, todos: action.todos };\n\n    default: return state;\n  }\n};\n","export enum ActionsType {\n  SET_STATUS = 'SET_STATUS',\n}\nconst initialState = {\n  status: 'all',\n};\n\nexport const actions = {\n  setStatus: (status:string) => ({\n    type: ActionsType.SET_STATUS,\n    status,\n  }),\n};\n\nexport const filterReducer = (\n  state = initialState,\n  action:{ type:ActionsType, status:string },\n) => {\n  switch (action.type) {\n    case ActionsType.SET_STATUS:\n      return { ...state, status: action.status };\n\n    default: return state;\n  }\n};\n","import { Todo } from '../types/Todo';\n\nexport enum ActionsType {\n  SELECT_TODO = 'SELECT_TODO',\n  RESET_TODO = 'RESET_TODO',\n}\n\nconst initialState = {\n  selectedTodo: null,\n};\n\nexport const actions = {\n  selectTodo: (todo:Todo) => (\n    { type: ActionsType.SELECT_TODO, todo }\n  ),\n  resetTodo: () => (\n    { type: ActionsType.SELECT_TODO, todo: null }\n  ),\n};\n\nexport const currentTodoReducer = (\n  state = initialState,\n  action: { type: ActionsType; todo: Todo | null },\n) => {\n  switch (action.type) {\n    case ActionsType.SELECT_TODO:\n      return {\n        ...state,\n        selectedTodo: action.todo,\n      };\n\n    case ActionsType.RESET_TODO:\n      return {\n        ...state,\n        selectedTodo: null,\n      };\n\n    default:\n      return state;\n  }\n};\n","export enum SortType {\n  All = 'all',\n  Active = 'active',\n  Complited = 'completed',\n}\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { queryReducer } from '../features/queryReducer';\nimport { todosReducer } from '../features/todos';\nimport { filterReducer } from '../features/filterReducer';\nimport { currentTodoReducer } from '../features/currentTodo';\n\nconst rootReducer = combineReducers({\n  todo: currentTodoReducer,\n  status: filterReducer,\n  query: queryReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrTodo } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const {\n    id: TodoId,\n    title,\n    completed,\n  } = todo;\n\n  const { selectedTodo } = useAppSelector((state) => state.todo);\n  const dispatchTodo = useAppDispatch();\n\n  const handleSelectTodo = () => (\n    dispatchTodo(actionsCurrTodo.selectTodo(todo))\n  );\n\n  const { id } = selectedTodo || {};\n\n  const isSelected = TodoId === id;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': isSelected,\n      })}\n    >\n      <td className=\"is-vcentered\">{TodoId}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={cn({\n          'has-text-success': completed,\n          'has-text-danger': !completed,\n        })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={handleSelectTodo}\n        >\n          <span className=\"icon\">\n            <i className={cn('far', {\n              'fa-eye': !isSelected,\n              'fa-eye-slash': isSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n\n        {todos.map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsQuery } from '../../features/queryReducer';\nimport { actions as actionsFilter } from '../../features/filterReducer';\nimport { SortType } from '../../types/SortType';\n\nexport const TodoFilter: React.FC = () => {\n  const { query } = useAppSelector((state) => state.query);\n  const { status } = useAppSelector((state) => state.status);\n\n  const dispatchQuery = useAppDispatch();\n  const dispatchStatus = useAppDispatch();\n\n  const handleSelectFilter = (event: React.ChangeEvent<HTMLSelectElement>) => (\n    dispatchStatus(actionsFilter.setStatus(event.target.value as SortType))\n  );\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => (\n    dispatchQuery(actionsQuery.setQuery(event.target.value))\n  );\n\n  const handleResetQuery = () => (\n    dispatchQuery(actionsQuery.clearQuery())\n  );\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelectFilter}\n          >\n            {Object.values(SortType).map((selectedType) => (\n              <option key={selectedType} value={selectedType}>\n                {selectedType.charAt(0).toUpperCase() + selectedType.slice(1)}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleResetQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export const ERROR_MESSAGE = 'Invalid data';\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { ERROR_MESSAGE } from '../../helpers/variables';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrTodo } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { selectedTodo } = useAppSelector((state) => state.todo);\n  const dispatchTodo = useAppDispatch();\n\n  const {\n    userId,\n    id,\n    title,\n    completed,\n  } = selectedTodo;\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(userId)\n      .then((user) => setSelectedUser(user))\n      // eslint-disable-next-line no-console\n      .catch(() => console.error(ERROR_MESSAGE))\n      .finally(() => setIsLoading(false));\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatchTodo(actionsCurrTodo.resetTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser?.email}`}>\n                {selectedUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { SortType } from './types/SortType';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { ERROR_MESSAGE } from './helpers/variables';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as actionsTodos } from './features/todos';\n\nfunction getPreparedTodos(\n  todos: Todo[],\n  query: string,\n  optionChange: SortType,\n): Todo[] {\n  let getNewTodos = [...todos];\n\n  getNewTodos = getNewTodos.filter(todo => {\n    switch (optionChange) {\n      case SortType.Active:\n        return !todo.completed;\n      case SortType.Complited:\n        return todo.completed;\n      case SortType.All:\n      default:\n        return todo;\n    }\n  });\n\n  if (query) {\n    getNewTodos = getNewTodos.filter(({ title }) => {\n      const preparedTitle = title.trim().toLowerCase();\n      const preparedQuery = query.trim().toLowerCase();\n\n      return preparedTitle.includes(preparedQuery);\n    });\n  }\n\n  return getNewTodos;\n}\n\nexport const App: React.FC = () => {\n  const { query } = useAppSelector((state) => state.query);\n  const { todos } = useAppSelector((state) => state.todos);\n  const { status } = useAppSelector((state) => state.status);\n\n  const dispatchTodos = useAppDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n  const { selectedTodo } = useAppSelector((state) => state.todo);\n\n  const visibleTodos = getPreparedTodos(todos, query, status as SortType);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((res) => dispatchTodos(actionsTodos.setTodos(res)))\n      // eslint-disable-next-line no-console\n      .catch(() => console.error(ERROR_MESSAGE))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const isfilterError = !isLoading && !visibleTodos.length;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n            {isfilterError\n              ? (\n                <h3 className=\"filter-error\">There are no todos matching current filter criteria</h3>\n              )\n              : (\n                <div className=\"block\">\n                  {isLoading\n                    ? <Loader />\n                    : (\n                      <TodoList\n                        todos={visibleTodos}\n                      />\n                    )}\n                </div>\n              )}\n          </div>\n        </div>\n      </div>\n\n      {!!selectedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}